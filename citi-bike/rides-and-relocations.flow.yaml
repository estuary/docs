import:
  - rides.flow.yaml

collections:
  # Bikes are periodically relocated in the Citi Bike system, which show up as
  # a bike ending a ride at one station and then starting a ride at another.
  # Enrich rides with a preceding relocation event, when this happens.
  - name: examples/citi-bike/rides-and-relocations
    schema:
      $ref: ride.schema.yaml
      properties:
        relocation: { const: true }

    # Unique composite key for each ride or relocation.
    key: [/bike_id, /begin/timestamp]

    derivation:
      # We must determine if the start of a current ride is different than the
      # end of a previous ride, for each bike. But, we don't have the prior
      # ending station station available in the source document.
      #
      # Registers provide a place to persist state that's updated as source
      # documents are processed. Each source document is mapped to a specific
      # register through its shuffle key.
      #
      # Registers are shared across all transforms of the derivation. Transforms
      # reading from different source collections can share state through
      # registers, using a shuffle key that's common to both.
      register:
        # Registers are JSON documents, just like collection documents,
        # and have an associated schema which is validated against.
        schema: ride.schema.yaml#/$defs/terminus
        # If a particular shuffle key value has no set register, "initial" is
        # the stand-in value which is provided to the lambda. It must validate
        # against the register's schema.
        initial:
          station: { id: 0, name: "" }
          timestamp: "0000-00-00 00:00:00.0"

      transform:
        fromRides:
          source:
            name: examples/citi-bike/rides
          # Shuffle on bike ID to preserve the ending station of each bike.
          shuffle: [/bike_id]
          update:
            # An "update" lambda updates the register of the current shuffle key.
            # Here we retain the ending station of the current ride.
            nodeJS: return [source.end];
          publish:
            # A "publish" lambda always runs after an "update" lambda.
            # Along with the `source` variable, publish lambdas have
            # automatic variables `current` and `previous` in their scope:
            #
            # * `previous` is the register value *before* applying the "update" lambda.
            # * `current` is the register *after* applying "update".
            #
            # If there is no "update" lambda, `current` and `previous` are the same.
            #
            # Here, we emit a relocation event alongside the ride if one occurred.
            # Otherwise, we emit just the ride.
            nodeJS: |
              if (previous.station.id != 0 && previous.station.id != source.begin.station.id) {
                return [
                  { bike_id: source.bike_id, begin: previous, end: source.begin, relocation: true },
                  source,
                ];
              }
              return [source];

tests:
  "Expect a sequence of connected rides don't produce a relocation event":
    - ingest:
        collection: examples/citi-bike/rides
        documents:
          # Bike goes from station 1 => 2 => 3 => 4.
          - &ride1
            bike_id: &bike 17558
            begin: &station1
              station: { id: 3276, name: "Marin Light Rail" }
              timestamp: "2020-09-01 09:21:12.3090"
            end: &station2
              station: { id: 3639, name: "Harborside" }
              timestamp: "2020-09-01 13:48:12.3830"
          - &ride2
            bike_id: *bike
            begin: *station2
            end: &station3
              station: { id: 3202, name: "Newport PATH" }
              timestamp: "2020-09-01 14:33:35.1020"
          - &ride3
            bike_id: *bike
            begin: *station3
            end: &station4
              station: { id: 3267, name: "Morris Canal" }
              timestamp: "2020-09-01 16:49:30.1610"
    - verify:
        collection: examples/citi-bike/rides-and-relocations
        documents: [*ride1, *ride2, *ride3]

  "Expect a disconnected ride sequence produces an interleaved relocation":
    - ingest:
        collection: examples/citi-bike/rides
        documents:
          - &ride1 { bike_id: *bike, begin: *station1, end: *station2 }
          - &ride2 { bike_id: *bike, begin: *station3, end: *station4 }
    - verify:
        collection: examples/citi-bike/rides-and-relocations
        documents:
          - *ride1
          - {
              bike_id: *bike,
              begin: *station2,
              end: *station3,
              relocation: true,
            }
          - *ride2
