import:
  - rides.flow.yaml

collections:
  - name: examples/citi-bike/bike-moves
    schema:
      type: object
      properties:
        bike_id: { $ref: ride.schema.yaml#/properties/bike_id }
        from: { $ref: ride.schema.yaml#/$defs/terminus }
        to: { $ref: ride.schema.yaml#/$defs/terminus }
      required: [bike_id, from, to]

    key: [/bike_id, /from/timestamp]

    derivation:
      register:
        schema: ride.schema.yaml#/$defs/terminus
        initial:
          timestamp: "0000-00-00 00:00:00.0"
          station: { id: 0, name: "" }
      transform:
        checkForMoveAndUpdateStation:
          source:
            name: examples/citi-bike/rides
          shuffle: [/bike_id]
          update:
            nodeJS: return [source.end];
          publish:
            nodeJS: |
              if (previous.station.id != source.begin.station.id) {
                return [{ bike_id: source.bike_id, from: previous, to: source.begin }];
              }
              return [];

tests:
  "Expect connected rides don't produce a move":
    - ingest:
        collection: examples/citi-bike/rides
        documents:
          - bike_id: &bikeID 17558
            begin: &station1
              station: { id: 3276, name: "Marin Light Rail" }
              timestamp: "2020-09-01 09:21:12.3090"
            end: &station2
              station: { id: 3639, name: "Harborside" }
              timestamp: "2020-09-01 13:48:12.3830"
          - bike_id: *bikeID
            begin: *station2
            end: &station3
              station: { id: 3202, name: "Newport PATH" }
              timestamp: "2020-09-01 14:33:35.1020"
          - bike_id: *bikeID
            begin: *station3
            end: &station4
              station: { id: 3267, name: "Morris Canal" }
              timestamp: "2020-09-01 16:49:30.1610"
    - verify:
        collection: examples/citi-bike/bike-moves
        documents: []
